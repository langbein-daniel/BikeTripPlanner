#
# General
# =======
#

NAME=journey-planner
BUILD_NAME=build

# The following 4 variables define a rectangular geographical area.
# That bounding box is used to crop the OSM region
# which results in a smaller background map and a smaller geocoder database.
#
# The example coordinates surround all public transport stops of the VGN,
# a German transport association.
MIN_LON=10.011636032586688
MAX_LON=12.223993889052613
MIN_LAT=48.70792025947608
MAX_LAT=50.25793688217101

MIN_ZOOM=8

# Used to
# - determine the correct times of time-restricted
# entities in the OSM data set by OpenTripPlanner
# - display correct time in Digitransit-UI
TIMEZONE=Europe/Berlin

# URL to GTFS .zip file.
# Alternatively, path to local .zip file relative to ./gtfs-data directory.
#
# The example URL points to the GTFS dataset of the VGN.
GTFS_URL=https://www.vgn.de/opendata/GTFS.zip
#GTFS_URL=gtfs.zip

# The chosen GTFS data set does not contain the column bikes_allowed,
# and the CSV files contain some unescaped quotes.
#
# For details, see
# https://github.com/langbein-daniel/gtfs-modifications#usage
GTFS_MODIFICATION_PARAM='--bikes-allowed True --escape-double-quotes-in-routes True'

# URL to .osm.pbf region from geofabrik.de server.
# Alternatively, path to local .osm.pbf file relative to ./osm-excerpt directory.
#
# Please pick a region that covers your bounding box.
#
# The Germany OSM extract covers (almost) the complete bounding box of the VGN.
OSM_PBF_URL=https://download.geofabrik.de/europe/germany-latest.osm.pbf
#OSM_PBF_URL=region.osm.pbf

# If the built Docker images shall be published
# to a Docker container registry,
# then adjust the following two values.
#
# URL to user of a Docker container registry
DOCKER_REGISTRY_URL=docker.io/biketripplanner/
# The images of the individual services are tagged with
#   ${DOCKER_REGISTRY_URL}${SERVICE}:${DOCKER_IMAGE_TAG}
# and
#   ${DOCKER_REGISTRY_URL}${SERVICE}:${DOCKER_IMAGE_TAG}-${DATE}
#
# Use e.g. the name of the area you configured
# via the bounding box or the (main) transport
# association from the GTFS dataset.
#
# By tagging the images like this you can easily switch between
# multiple published areas or transport associations.
#
# In our example this transport association is abbreviated with VGN.
DOCKER_IMAGE_TAG=VGN

#
# Healthcheck
# ===========
#
# The values in this section are used by the container healthchecks.
# We use them to (I) detect if the services are running and (II)
# test if they use the correct data sources.
#
# For the latter we need to provide some information that is
# specific to the configured area and transport association.
#

# Name of one agency of the GTFS data set.
# As in gtfs.zip > agency.txt > agency_name.
HEALTHCHECK_OPENTRIPPLANNER=VGN

# We imported GTFS data into two custom layers, stop and station.
# If these layers don't exist, something is wrong!
# To check this, we use the following healthcheck:
HEALTHCHECK_API_REQUEST=localhost:4000/v1/search?text=N%C3%BCrnberg&lang=en&layers=stop,station
# Name of one station from the GTFS data set.
# As in gtfs.zip > stops.txt > stop_name.
HEALTHCHECK_API_RESPONSE='"name":"Nürnberg Hbf"'

# An address inside the OSM data and bounding box.
HEALTHCHECK_LIBPOSTAL_REQUEST=localhost:4400/parse?address=Bahnhofsplatz%209,%2090443%20N%C3%BCrnberg,%20Germany
# A parsed part of the above address.
HEALTHCHECK_LIBPOSTAL_RESPONSE='"label":"city","value":"nürnberg"'

# For this service there are multiple possible healthcheck URLs:
#   http://localhost:4100/parser/search?text=n%C3%BCrnberg
#   http://localhost:4100/parser/findbyid?ids=101905935
#   http://localhost:4100/parser/query?text=n%C3%BCrnberg
#   http://localhost:4100/parser/tokenize?text=n%C3%BCrnberg
#   http://localhost:4100/parser/search?text=nürnberg&lang=rus
# One of them is enough.
#
# E.g. name of a city.
HEALTHCHECK_PLACEHOLDER_REQUEST=localhost:4100/parser/search?text=n%C3%BCrnberg
HEALTHCHECK_PLACEHOLDER_RESPONSE='"name":"Nürnberg"'

# Coordinates and a nearby address.
HEALTHCHECK_INTERPOLATION_REQUEST=localhost:4300/search/geojson?lat=49.44627&lon=11.08221&number=9&street=bahnhofsplatz
HEALTHCHECK_INTERPOLATION_RESPONSE='"type":"exact"'

# Coordinate (LON/LAT).
HEALTHCHECK_PIP_REQUEST=localhost:4200/11.08245/49.44511
# A locality/city/country containing the above coordinate.
HEALTHCHECK_PIP_RESPONSE=Nürnberg

#
# Tileserver GL
# =============
#
# No need to change these values.
#

# URL to map style git repository. Alternativey: Name of directory located inside ./tileserver-gl.
MAP_STYLE_URL=https://github.com/langbein-daniel/cyclo-bright-gl-style.git

#
# OpenTripPlanner
# ===============
#
# You may need to increase these values
# depending on the size of your bounding box
# and GTFS data.
#

# Used during build.
JAVA_BUILD_OPTS=-Xmx10G
# Used during runtime.
# build-config.json vs build-config-lightweigt.json:
# - docker stats:
#   - 5.1 GB RAM
#   - 4.4 GB RAM
# - Docker image size:
#   - 1.2 GB
#   - 0.85 GB
JAVA_OPTS=-Xmx8G

#
# Pelias
# ======
#
# Only the country code needs to be adjusted.
#

# 2-digit country code
# - https://www.whosonfirst.org/docs/placetypes/#iso-country-codes
# - https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes
# - https://github.com/whosonfirst-data/whosonfirst-data#repositories
COUNTRY_CODE=DE

PELIAS_BUILD_DIR=./pelias

#
# Digitransit-UI
# ==============
#
# No need to change these values.
#

# In milliseconds.
OTP_TIMEOUT=30000

#
# Docker image versions
# =====================
#
# No need to change these values.
#

# git repository containing Dockerfile for Digitransit-UI.
# Can also be a local path.
DOCKERFILE_DIGITRANSIT_UI=github.com/langbein-daniel/digitransit-ui
# URL to git repository containing Dockerfile for pelias-gtfs.
DOCKERFILE_PELIAS_GTFS=https://github.com/HSLdevcom/pelias-gtfs

# Docker image tags.
IMAGE_TILESERVER_GL=maptiler/tileserver-gl
IMAGE_OPENTRIPPLANNER=opentripplanner/opentripplanner:latest
IMAGE_PELIAS_OPENSTREETMAP=pelias/openstreetmap:master
IMAGE_PELIAS_POLYLINES=pelias/polylines:master
IMAGE_PELIAS_WHOSONFIRST=pelias/whosonfirst:master
IMAGE_PELIAS_SCHEMA=pelias/schema:master
IMAGE_PELIAS_LIBPOSTAL=pelias/libpostal-service
IMAGE_PELIAS_API=pelias/api:master
IMAGE_PELIAS_PLACEHOLDER=pelias/placeholder:master
IMAGE_PELIAS_INTERPOLATION=pelias/interpolation:master
IMAGE_PELIAS_PIP=pelias/pip-service:master
IMAGE_PELIAS_ELASTICSEARCH=pelias/elasticsearch:7.16.1
