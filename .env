#
# General
# =======
#

NAME=journey-planner
BUILD_NAME=build

# The following 4 variables define a geographical area.
# The bounding-box is used to crop the OSM region.
# This results in a smaller background map and a smaller geocoder database.
#
# The example coordinates surround the area of the VGN,
# a German transport association.
MIN_LON=10.011636032586688
MAX_LON=12.223993889052613
MIN_LAT=48.70792025947608
MAX_LAT=50.25793688217101

# URL to GTFS .zip file.
# Alternatively, path to local .zip file relative to ./gtfs-data directory.
#
# The example URL points to the GTFS dataset of the VGN.
#GTFS_URL=https://www.vgn.de/opendata/GTFS.zip
GTFS_URL=gtfs.zip

# URL to .osm.pbf region from geofabrik.de server.
# Alternatively, path to local .osm.pbf file relative to ./osm-excerpt directory.
#
# Please pick a region that covers your bounding-box.
#
# The Germany OSM extract covers (almost) the complete bounding-box.
OSM_PBF_URL=https://download.geofabrik.de/europe/germany-latest.osm.pbf
#OSM_PBF_URL=region.osm.pbf

# If the built Docker images shall be published
# to a Docker container registry,
# then adjust the following two values.
#
# URL to user of a Docker container registry
DOCKER_REGISTRY_URL=docker.io/biketripplanner/
# The individual images are tagged with this value.
# Use e.g. the name of the area you configured
# via the bounding-box or the (main) transport
# association from the GTFS dataset.
#
# By tagging the images like this you can easily switch between
# multiple published areas or transport associations.
#
# In our example this is the VGN transport association.
DOCKER_IMAGE_TAG=VGN

#
# Healthcheck
# ===========
#
# The values in this section are used by the container helthchecks.
# We use them to detect (I) if the services are running and (II)
# if the expected data is available.
# For the latter we provide some information that is
# specific to the configured area and transport association.
#

# Name of one agency of the GTFS data set.
# As in gtfs.zip > agency.txt > agency_name.
HEALTHCHECK_OPENTRIPPLANNER=VGN

# We imported GTFS data into two custom layers, stop and station.
# If these layers don't exist, something is wrong!
# To check this, we use the following healthcheck:
HEALTHCHECK_API_REQUEST=localhost:4000/v1/search?text=N%C3%BCrnberg&lang=en&layers=stop,station
# Name of one station from the GTFS data set.
HEALTHCHECK_API_RESPONSE='"name":"Nürnberg Hbf"'

# An address inside the OSM data and bounding-box.
HEALTHCHECK_LIBPOSTAL_REQUEST=localhost:4400/parse?address=Bahnhofsplatz%209,%2090443%20N%C3%BCrnberg,%20Germany
# A parsed part of the above address.
HEALTHCHECK_LIBPOSTAL_RESPONSE='"label":"city","value":"nürnberg"'

# For this service there are multiple possible healthcheck URLs:
#   http://localhost:4100/parser/search?text=n%C3%BCrnberg
#   http://localhost:4100/parser/findbyid?ids=101905935
#   http://localhost:4100/parser/query?text=n%C3%BCrnberg
#   http://localhost:4100/parser/tokenize?text=n%C3%BCrnberg
#   http://localhost:4100/parser/search?text=nürnberg&lang=rus
# One of them is enough.
#
# E.g. name of a city.
HEALTHCHECK_PLACEHOLDER_REQUEST=localhost:4100/parser/search?text=n%C3%BCrnberg
HEALTHCHECK_PLACEHOLDER_RESPONSE='"name":"Nürnberg"'

# Coordinates and a nearby address.
HEALTHCHECK_INTERPOLATION_REQUEST=localhost:4300/search/geojson?lat=49.44627&lon=11.08221=11&number=9&street=bahnhofsplatz
HEALTHCHECK_INTERPOLATION_RESPONSE='"type":"exact"'

# Coordinate (LON/LAT).
HEALTHCHECK_PIP_REQUEST=localhost:4200/11.08245/49.44511
# A locality/city/country containing the above coordinate.
HEALTHCHECK_PIP_RESPONSE=Nürnberg

#
# Tileserver GL
# =============
#
# These values do not need to be changed.
#

# URL to map style git repository. Alternativey: Name of directory located inside ./tileserver-gl.
MAP_STYLE_URL=https://github.com/langbein-daniel/cyclo-bright-gl-style.git

#
# OpenTripPlanner
# ===============
#
# You may need to increase these values
# depending on the size of your bounding-box
# and how large your GTFS data set is.
#

# OpenTripPlanner Java options during build steps.
JAVA_BUILD_OPTS=-Xmx10G
# OpenTripPlanner Java options.
JAVA_OPTS=-Xmx2G

#
# Pelias
# ======
#
# These values do not need to be changed.
#

PELIAS_BUILD_DIR=./pelias
# URL to git repository containing Dockerfile for pelias-gtfs.
PELIAS_GTFS_URL=https://github.com/HSLdevcom/pelias-gtfs

# Image versions of Pelias services:
PELIAS_OPENSTREETMAP=pelias/openstreetmap:master
PELIAS_POLYLINES=pelias/polylines:master
PELIAS_WHOSONFIRST=pelias/whosonfirst:master
PELIAS_SCHEMA=pelias/schema:master
PELIAS_LIBPOSTAL=pelias/libpostal-service
PELIAS_API=pelias/api:master
PELIAS_PLACEHOLDER=pelias/placeholder:master
PELIAS_INTERPOLATION=pelias/interpolation:master
PELIAS_PIP=pelias/pip-service:master
PELIAS_ELASTICSEARCH=pelias/elasticsearch:7.16.1
