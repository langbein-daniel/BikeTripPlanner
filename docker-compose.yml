version: '3.9'
# https://docs.docker.com/compose/compose-file/#name-top-level-element
name: ${NAME:?}
networks:
  proxy:
  pelias:
services:

  #
  # BACKGROUND MAP
  #

  tileserver-gl:
    build:
      context: tileserver-gl
      args:
        IMAGE_TILESERVER_GL: ${IMAGE_TILESERVER_GL:?}
        # Used to determine name of `osm-excerpt` image.
        BUILD_NAME: ${BUILD_NAME:?}
        MAP_STYLE_URL: ${MAP_STYLE_URL:?}
        REGION_URL: ${OSM_PBF_URL:?}
        MIN_LON: ${MIN_LON:?}
        MAX_LON: ${MAX_LON:?}
        MIN_LAT: ${MIN_LAT:?}
        MAX_LAT: ${MAX_LAT:?}
    restart: unless-stopped
    ports:
      - '127.0.0.1:7070:8080/tcp'
    networks:
      - proxy

  #
  # ROUTING
  #

  opentripplanner:
    build:
      context: opentripplanner
      args:
        IMAGE_OPENTRIPPLANNER: ${IMAGE_OPENTRIPPLANNER:?}
        # Used to determine name of `osm-excerpt` and `gtfs-filtered` images.
        BUILD_NAME: ${BUILD_NAME:?}
        JAVA_BUILD_OPTS: ${JAVA_BUILD_OPTS:?}
        JAVA_OPTS: ${JAVA_OPTS:?}
        TIMEZONE: ${TIMEZONE:?}
        HEALTHCHECK_AGENCY_NAME: ${HEALTHCHECK_OPENTRIPPLANNER:?}
    restart: unless-stopped
    ports:
      - '127.0.0.1:8080:8080/tcp'
    networks:
      - proxy

  #
  # GEOCODER
  #

  # https://github.com/pelias/api
  #
  # This is the core of Pelias. It talks to all other services (if available), Elasticsearch, and provides the interface for all queries to Pelias.
  # https://github.com/pelias/documentation/blob/master/services.md#descriptions
  api:
    build:
      context: ${PELIAS_BUILD_DIR:?}
      dockerfile: ./api.Dockerfile
      args:
        IMAGE_PELIAS_API: ${IMAGE_PELIAS_API:?}
        HEALTHCHECK_REQUEST: ${HEALTHCHECK_API_REQUEST:?}
        HEALTHCHECK_RESPONSE: ${HEALTHCHECK_API_RESPONSE:?}
        PORT: 4000
    restart: unless-stopped
    ports: [ '127.0.0.1:4000:4000/tcp' ]
    networks:
      - proxy
      - pelias
    depends_on:
      libpostal:
        condition: service_healthy
      placeholder:
        condition: service_healthy
      interpolation:
        condition: service_healthy
      pip:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  # https://github.com/pelias/libpostal-service
  #
  # Libpostal is a library that provides an address parser using a statistical natural language processing model trained on OpenStreetMap, OpenAddresses, and other open data. It is quite good at parsing fully specified input, but cannot handle autocomplete very well.
  # https://github.com/pelias/documentation/blob/master/services.md#descriptions
  #
  # Pelias Libpostal Service creates an instance of the whosonfirst/go-whosonfirst-libpostal server.
  # https://github.com/pelias/libpostal-service#pelias-libpostal-service
  #
  # go-whosonfirst-libpostal uses the libpostal C library.
  # https://github.com/whosonfirst/go-whosonfirst-libpostal#wof-libpostal-server
  #
  # The data for this model is gotten from OpenAddresses, OpenStreetMap and data generated by Senzing based on customer feedback (a few hundred records), a total of about 1.2 billion records of data from over 230 countries, in 100+ languages. The data from OpenStreetMap and OpenAddresses is good but not perfect so the data set was modified by filtering out badly formed addresses, correcting misclassified address tokens and removing tokens that didn't belong in the addresses, whenever these conditions were encountered.
  # https://github.com/openvenues/libpostal#installation-with-an-alternative-data-model
  #
  # GIF demonstration on parsing a full address input: https://github.com/openvenues/libpostal#examples-of-parsing
  libpostal:
    build:
      context: ${PELIAS_BUILD_DIR:?}
      dockerfile: ./libpostal.Dockerfile
      args:
        IMAGE_PELIAS_LIBPOSTAL: ${IMAGE_PELIAS_LIBPOSTAL:?}
        HEALTHCHECK_REQUEST: ${HEALTHCHECK_LIBPOSTAL_REQUEST:?}
        HEALTHCHECK_RESPONSE: ${HEALTHCHECK_LIBPOSTAL_RESPONSE:?}
        PORT: 4400
    restart: unless-stopped
    # Ports are only required for debugging purposes and can be commented out.
    ports: [ '127.0.0.1:4400:4400/tcp' ]
    networks:
      - pelias

  # https://github.com/pelias/placeholder
  #
  # Placeholder is used specifically to handle the relational component of geocoding. Placeholder understands, for example, that Paris is a city in a country called France, but that there is another city called Paris in the state of Texas, USA.
  # Placeholder also stores the translations of administrative areas in multiple languages. Therefore, it is required if any support for multiple languages is desired.
  # https://github.com/pelias/documentation/blob/master/services.md#descriptions
  #
  # Can be run independently as it has no external dependencies.
  # https://github.com/pelias/placeholder#pelias-coarse-geocoder
  #
  # The data is sourced from the Who's On First project.
  # https://github.com/pelias/placeholder#natural-language-parser-for-geographic-text
  #
  # The generated DB is hosted by Geocode Earth (`store.sqlite3`).
  # https://github.com/pelias/placeholder#download-the-required-database-files
  # This data is made available under the same license conditions as the source data: https://whosonfirst.org/docs/licenses/
  # https://geocode.earth/data
  #
  # Configuration: `PLACEHOLDER_DATA` - Path to the directory where the placeholder service will find the `store.sqlite3` database file.
  # https://github.com/pelias/placeholder#configuration-via-environment-variables
  placeholder:
    build:
      context: ${PELIAS_BUILD_DIR:?}
      dockerfile: ./placeholder.Dockerfile
      args:
        IMAGE_PELIAS_PLACEHOLDER: ${IMAGE_PELIAS_PLACEHOLDER:?}
        HEALTHCHECK_REQUEST: ${HEALTHCHECK_PLACEHOLDER_REQUEST:?}
        HEALTHCHECK_RESPONSE: ${HEALTHCHECK_PLACEHOLDER_RESPONSE:?}
        PORT: 4100
    restart: unless-stopped
    # Ports are only required for debugging purposes and can be commented out.
    ports: [ '127.0.0.1:4100:4100/tcp' ]
    networks:
      - pelias

  # https://github.com/pelias/interpolation
  #
  # The interpolation service combines street geometries with known addresses and address ranges, to allow estimating the position of addresses that might exist, but aren't in existing open data sources.
  # https://github.com/pelias/documentation/blob/master/services.md#descriptions
  #
  # it can also be used as a stand-alone application
  # https://github.com/pelias/interpolation#overview
  #
  # OSM -> polyline -> street.db
  # https://github.com/pelias/interpolation#street-database
  #
  # OSM and/or OpenAddresses -> address.db
  # https://github.com/pelias/interpolation#address-database
  #
  # Optionally: US Census Bureau TIGER data
  # https://github.com/pelias/interpolation#tiger
  #
  # CMD [ "./interpolate", "server", "/data/interpolation/address.db", "/data/interpolation/street.db" ]
  # https://github.com/pelias/interpolation/blob/a1451e9ba4db4ceabd53018310ab700cbc39708f/Dockerfile#L62
  #
  # The data is split into 2 different sqlite3 databases: street.db and address.db
  # https://github.com/pelias/interpolation#architecture
  interpolation:
    build:
      context: ${PELIAS_BUILD_DIR:?}
      dockerfile: ./interpolation.Dockerfile
      args:
        IMAGE_PELIAS_INTERPOLATION: ${IMAGE_PELIAS_INTERPOLATION:?}
        HEALTHCHECK_REQUEST: ${HEALTHCHECK_INTERPOLATION_REQUEST:?}
        HEALTHCHECK_RESPONSE: ${HEALTHCHECK_INTERPOLATION_RESPONSE:?}
        PORT: 4300
    restart: unless-stopped
    # Ports are only required for debugging purposes and can be commented out.
    ports: [ '127.0.0.1:4300:4300/tcp' ]
    networks:
      - pelias

  # https://github.com/pelias/pip-service
  #
  # The Point-in-Polygon (PIP) service loads polygon data representing the boundaries of cities, states, regions, countries etc. into memory, and can perform calculations on that geometric data. It's used to determine if a given point lies in a particular polygon. Thus, it's highly recommended for reverse geocoding.
  # https://github.com/pelias/documentation/blob/master/services.md#descriptions
  #
  # It will look for Who's On First data in the place configured in `pelias.json`.
  # https://github.com/pelias/pip-service#usage
  pip:
    build:
      context: ${PELIAS_BUILD_DIR:?}
      dockerfile: ./pip.Dockerfile
      args:
        IMAGE_PELIAS_PIP: ${IMAGE_PELIAS_PIP:?}
        HEALTHCHECK_REQUEST: ${HEALTHCHECK_PIP_REQUEST:?}
        HEALTHCHECK_RESPONSE: ${HEALTHCHECK_PIP_RESPONSE:?}
        PORT: 4200
    restart: unless-stopped
    # Ports are only required for debugging purposes and can be commented out.
    ports: [ '127.0.0.1:4200:4200/tcp' ]
    networks:
      - pelias

  # The underlying datastore that does most of the query heavy-lifting and powers our search results. We use Elasticsearch. Currently, versions 6 and 7 are supported.
  # https://github.com/pelias/pelias/#database
  elasticsearch:
    build:
      context: ${PELIAS_BUILD_DIR:?}
      dockerfile: ./elasticsearch.Dockerfile
      args:
        IMAGE_PELIAS_ELASTICSEARCH: ${IMAGE_PELIAS_ELASTICSEARCH:?}
    restart: unless-stopped
    # Ports are only required for debugging purposes and can be commented out.
    ports: [ '127.0.0.1:9200:9200/tcp', '127.0.0.1:9300:9300/tcp' ]
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add: [ "IPC_LOCK" ]
    security_opt:
      - seccomp=unconfined
    networks:
      - pelias

  #
  # WEB UI
  #

  digitransit-ui:
    build:
      # https://docs.docker.com/engine/reference/commandline/build/#build-with-url
      context: ${DOCKERFILE_DIGITRANSIT_UI:?}
      args:
        CONFIG: btp
        TIMEZONE: ${TIMEZONE:?}
        OTP_TIMEOUT: ${OTP_TIMEOUT:?}
        MIN_LON: ${MIN_LON:?}
        MAX_LON: ${MAX_LON:?}
        MIN_LAT: ${MIN_LAT:?}
        MAX_LAT: ${MAX_LAT:?}
        MIN_ZOOM: ${MIN_ZOOM:?}
    environment:
      OTP_URL: http://localhost:8080/otp/routers/default/
      GEOCODING_BASE_URL: http://localhost:4000/v1
      DEFAULT_MAP_URL: http://localhost:7070/styles/bicycle/
      STOP_MAP_URL: http://localhost:8080/otp/routers/default/vectorTiles/stops,stations/
    ports:
      - '127.0.0.1:9090:8080/tcp'
    networks:
      - proxy
    depends_on:
      tileserver-gl:
        condition: service_healthy
      api:
        condition: service_healthy
      opentripplanner:
        condition: service_healthy
